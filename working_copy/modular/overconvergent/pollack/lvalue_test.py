from sage.all import *

def lvalue_using_OMS_split(A,p,D,r,prec1,prec2):
    """
    Computes special value of p-adic L-series in dim 2 when p splits

    INPUT:
        - A: modular symbols space
        - p: good ordinary prime that splits in Hecke eigenvalue field
        - D: discriminant of quadratic twist, currently needs to be a fundamental discriminant of a number field
        - r: rank of A
        - prec1: computation for 1st symbol done up to O(p^prec1)
        - prec2: computation for 2nd symbol done up to O(p^prec2)


    OUTPUT:
        - special value of p-adic L-series associated to A

    EXAMPLES:

    sage: M = ModularSymbols(93,2,1)
    sage: S = M.cuspidal_submodule()
    sage: Ne = S.new_subspace()
    sage: D = Ne.decomposition()
    sage: A = D[0]
    sage: from sage.modular.overconvergent.pollack.lvalue_test import lvalue_using_OMS_split
    sage: lvalue_using_OMS_split(A,11,1,2,4,5)
    
    sage: from sage.modular.overconvergent.pollack.lvalue_test import lvalue_using_OMS_split
    sage: N = 103
    sage: M = ModularSymbols(N,2,1)
    sage: S = M.cuspidal_submodule()
    sage: Ne = S.new_subspace()  
    sage: D = Ne.decomposition()
    sage: A = D[0]
    sage: lvalue_using_OMS_split(A,19,1,2,2,2)
    13 + O(19)
    """
    coeff = ZZ(r)/ZZ(2)
    from sage.modular.overconvergent.pollack.modsym_symk import form_modsym_from_decomposition    
    phi = form_modsym_from_decomposition(A)
    phis1 = phi.coerce_to_Qp(p,prec1)
    phis2 = phi.coerce_to_Qp(p,prec2)
    phi1 = phis1[0][0]
    phi2 = phis2[1][0]

    #these are ok
    #print "phi1 = ", phi1
    #print "phi2 = ", phi2
    psi1 = phis1[0][1]
    
    psi2 = phis2[1][1]
    f = A.q_eigenform(p+1,'alpha')
    ap = A.eigenvalue(p)
#    Phi1 =  [(0, 0), (22, 3), (231, 18), (65, 5), (296, 15), (109, 4), (360, 3), (50, 5), (268, 4), (158, 11), (296, 4), (268, 5), (202, 11), (203, 7), (267, 6), (204, 0), (158, 6), (0, 12), (317, 5), (158, 5), (246, 10), (204, 18), (157, 6), (311, 5), (159, 9), (0, 12), (296, 17), (268, 5), (93, 12), (268, 18), (252, 5), (223, 2), (247, 6), (93, 14), (65, 16), (360, 2), (318, 15), (0, 11), (231, 6), (109, 13), (21, 16), (154, 1), (296, 15), (158, 4), (268, 7), (246, 16), (0, 5), (0, 18), (252, 8), (50, 12), (268, 1), (268, 17), (0, 14), (93, 10), (0, 9), (312, 3), (93, 8), (268, 13), (0, 18), (222, 16), (1, 5), (252, 16), (43, 11), (334, 4), (252, 13), (93, 5), (0, 0), (65, 0), (28, 9), (65, 12), (268, 3), (340, 7), (114, 2), (246, 0), (93, 2), (22, 13), (203, 4), (340, 8), (130, 2), (0, 16), (28, 10), (268, 1), (0, 6), (202, 15), (115, 15), (0, 10), (296, 8), (312, 1), (312, 5), (0, 13), (0, 8), (93, 15), (1, 3), (252, 5), (333, 11), (93, 18), (0, 7), (268, 14), (201, 0), (253, 7), (158, 12), (296, 12), (296, 9), (333, 3), (158, 7), (203, 1), (43, 3), (50, 3), (0, 3), (0, 9), (65, 4), (296, 8), (0, 18), (269, 16), (92, 0), (109, 7), (65, 3), (64, 4), (65, 12), (224, 14), (28, 2), (225, 2), (296, 5), (173, 16), (49, 8), (0, 10), (0, 8), (252, 17), (44, 1), (203, 2), (93, 18), (268, 9), (158, 3), (43, 13), (66, 1), (252, 0), (160, 17), (158, 5), (334, 11), (0, 15), (49, 10), (93, 2), (138, 0), (158, 7), (268, 14), (93, 6), (268, 13), (93, 9), (0, 0), (202, 3), (50, 10), (22, 16), (109, 9), (92, 5), (22, 13), (340, 9), (92, 13), (225, 18), (43, 15), (93, 13), (0, 17), (203, 12), (158, 14), (0, 9), (268, 5), (268, 14), (296, 2), (157, 13), (296, 3), (318, 18), (247, 17), (114, 4), (44, 15), (224, 12), (28, 3), (44, 5), (92, 11), (225, 11), (93, 5), (0, 10), (50, 8), (268, 6), (311, 8), (66, 13), (0, 3), (28, 12), (224, 14), (21, 9), (186, 7), (268, 15), (0, 17), (65, 5), (225, 10), (49, 10), (340, 13), (0, 12), (246, 12), (50, 12), (268, 3), (158, 5), (312, 11), (109, 10), (109, 1), (0, 5), (317, 18), (202, 5), (158, 2), (0, 11), (296, 10), (311, 7), (202, 10), (65, 14), (295, 14), (318, 9), (317, 1), (158, 2), (28, 14), (253, 10), (65, 1), (267, 10), (318, 8), (44, 17), (296, 14), (317, 5), (158, 18), (159, 9), (108, 18), (44, 18), (65, 16), (252, 5), (296, 3), (253, 15), (109, 2), (268, 12), (296, 13), (312, 12), (317, 4), (43, 8), (296, 4), (0, 14), (109, 1), (317, 7), (318, 10), (137, 8), (0, 7), (1, 7), (360, 8), (318, 7), (0, 0), (93, 12), (333, 0), (21, 1), (203, 11), (28, 0), (0, 17), (312, 13), (49, 9), (43, 14), (66, 4), (296, 11), (0, 0), (0, 1), (50, 0), (158, 8), (253, 0), (158, 15), (203, 2), (49, 4), (44, 1), (0, 17), (64, 2), (138, 14), (66, 11), (49, 3), (1, 13), (0, 8), (115, 13), (296, 11), (22, 8), (0, 0), (268, 4), (158, 17), (340, 7), (49, 14), (225, 15), (202, 7), (0, 3), (108, 14), (64, 5), (137, 16), (247, 4), (28, 11), (268, 6), (296, 7), (1, 5), (65, 10), (296, 14), (360, 6), (225, 16), (93, 2), (0, 18), (0, 12), (339, 10), (297, 7), (49, 5), (0, 16), (159, 17), (0, 0), (268, 12), (268, 8), (158, 2), (252, 5), (65, 6), (252, 0), (159, 10), (27, 0), (201, 9), (269, 17), (65, 4), (268, 1), (247, 14), (157, 1), (333, 11), (92, 5), (50, 18), (64, 10), (203, 16), (317, 4), (158, 5), (130, 1), (252, 12), (203, 8), (93, 12), (0, 7), (268, 1), (360, 2), (159, 9), (340, 11), (334, 13), (296, 10), (203, 12), (223, 5), (333, 0), (360, 4), (49, 6), (317, 0), (247, 5), (268, 14), (268, 17)]
    
    phi1p = phi1.p_stabilize_ordinary(p,ZZ(psi1(ap)),prec1)
    #print "phi1p = ", phi1p
    phi2p = phi2.p_stabilize_ordinary(p,ZZ(psi2(ap)),prec2)
    #print "phi2p = ", phi2p
    Phi1 = phi1p.lift_to_OMS_eigen(p,prec1)
    #print "Phi1 = ", Phi1
    
    R1 = Qp(p,prec1)['x']
    x = R1.gen()
    h1 = x**2-ZZ(psi1(ap))*x+p
    alpha1 = h1.roots()[0][0]
    v1 = pLfunction_coef(Phi1,alpha1,coeff,D,p+1)
    print "v1 = ", v1

    #Phi2 =  [(0, 0), (318, 13), (170, 15), (276, 10), (85, 0), (235, 15), (360, 18), (82, 17), (321, 9), (316, 4), (85, 12), (321, 18), (275, 3), (45, 8), (320, 1), (46, 6), (316, 17), (0, 9), (41, 6), (316, 18), (3, 3), (46, 9), (315, 10), (279, 7), (317, 17), (0, 0), (85, 3), (321, 0), (40, 3), (321, 11), (126, 12), (231, 16), (4, 14), (40, 0), (276, 11), (360, 0), (42, 17), (0, 1), (170, 0), (235, 11), (317, 4), (325, 17), (85, 12), (316, 17), (321, 4), (3, 11), (0, 9), (0, 2), (126, 1), (82, 12), (321, 7), (321, 16), (0, 14), (40, 11), (0, 8), (280, 6), (40, 16), (321, 2), (0, 10), (230, 8), (1, 1), (126, 5), (319, 3), (237, 18), (126, 4), (40, 13), (0, 13), (276, 2), (125, 4), (276, 2), (321, 1), (44, 3), (357, 18), (3, 16), (40, 0), (318, 9), (45, 0), (44, 9), (191, 11), (0, 15), (125, 7), (321, 11), (0, 1), (44, 10), (358, 11), (0, 7), (85, 10), (280, 9), (280, 10), (0, 12), (0, 12), (40, 11), (1, 16), (126, 8), (236, 17), (40, 11), (0, 13), (321, 4), (274, 8), (127, 5), (316, 1), (85, 0), (85, 17), (236, 18), (316, 14), (45, 5), (319, 10), (82, 1), (0, 7), (0, 3), (276, 18), (85, 9), (0, 9), (322, 8), (39, 4), (235, 8), (276, 14), (275, 13), (276, 3), (1, 10), (125, 18), (2, 5), (85, 3), (149, 13), (81, 13), (0, 15), (0, 0), (126, 18), (320, 3), (45, 4), (40, 1), (321, 18), (316, 17), (319, 16), (277, 18), (126, 10), (87, 1), (316, 1), (237, 8), (0, 11), (81, 13), (40, 0), (130, 9), (316, 4), (321, 11), (40, 1), (321, 3), (40, 11), (0, 0), (44, 18), (82, 15), (318, 4), (235, 2), (39, 10), (318, 7), (44, 1), (39, 9), (2, 11), (319, 4), (40, 0), (0, 17), (45, 10), (316, 13), (0, 7), (321, 8), (321, 0), (85, 15), (315, 11), (85, 7), (42, 14), (4, 18), (357, 0), (320, 9), (1, 10), (125, 9), (320, 12), (39, 5), (2, 14), (40, 7), (0, 12), (82, 0), (321, 10), (279, 11), (277, 3), (0, 15), (125, 12), (1, 1), (317, 18), (80, 14), (321, 14), (0, 16), (276, 7), (2, 17), (81, 7), (44, 17), (0, 4), (3, 9), (82, 9), (321, 8), (316, 0), (280, 7), (235, 3), (235, 1), (0, 17), (41, 17), (44, 0), (316, 15), (0, 2), (85, 18), (279, 9), (275, 2), (276, 6), (84, 1), (42, 0), (41, 8), (316, 4), (125, 3), (127, 11), (276, 15), (320, 8), (42, 14), (320, 7), (85, 14), (41, 8), (316, 0), (317, 15), (234, 5), (320, 3), (276, 0), (126, 11), (85, 1), (127, 10), (235, 12), (321, 16), (85, 18), (280, 8), (41, 6), (319, 7), (85, 2), (0, 4), (235, 6), (41, 2), (42, 5), (360, 18), (0, 5), (1, 7), (360, 6), (42, 8), (0, 3), (40, 11), (236, 14), (317, 8), (45, 12), (125, 17), (0, 11), (280, 5), (81, 14), (319, 15), (277, 12), (85, 15), (0, 18), (0, 9), (82, 15), (316, 7), (127, 8), (316, 12), (45, 7), (81, 16), (320, 11), (0, 0), (275, 16), (130, 3), (277, 0), (81, 12), (1, 1), (0, 4), (358, 6), (85, 12), (318, 4), (0, 0), (321, 11), (316, 17), (44, 5), (81, 12), (2, 17), (275, 12), (0, 15), (234, 13), (275, 10), (360, 9), (4, 4), (125, 3), (321, 0), (85, 4), (1, 14), (276, 9), (85, 6), (360, 0), (2, 2), (40, 2), (0, 0), (0, 3), (43, 12), (86, 6), (81, 15), (0, 8), (317, 4), (0, 0), (321, 16), (321, 18), (316, 6), (126, 4), (276, 7), (126, 8), (317, 0), (124, 18), (274, 9), (322, 10), (276, 4), (321, 18), (4, 7), (315, 12), (236, 3), (39, 4), (82, 2), (275, 11), (45, 7), (41, 13), (316, 6), (191, 3), (126, 1), (45, 13), (40, 6), (0, 13), (321, 9), (360, 15), (86, 16), (44, 0), (237, 11), (85, 16), (45, 13), (231, 13), (236, 1), (360, 0), (81, 8), (41, 8), (4, 2), (321, 10), (321, 10)]
    
    Phi2 = phi2p.lift_to_OMS_eigen(p,prec2)
    #print "Phi2 = ", Phi2
    R2 = Qp(p,prec2)['x']
    x = R2.gen()
    h2 = x**2-ZZ(psi2(ap))*x+p
    alpha2 = h2.roots()[0][0]
    
    v2 = pLfunction_coef(Phi2,alpha2,coeff,D,p+1)
    return v1*v2
